// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  password  String
  role      Role     @default(PATIENT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
  payments     Payment[]
  sentMessages     Message[] @relation("MessageFrom")
  receivedMessages Message[] @relation("MessageTo")

  @@map("users")
}

model Provider {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String?
  bio         String?
  specialties String[]
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]
  availability Availability[]
  services     ProviderService[]

  @@map("providers")
}

model Service {
  id          String          @id @default(cuid())
  name        String
  description String?
  duration    Int             // duration in minutes
  price       Int             // price in cents
  category    ServiceCategory @default(GENERAL)
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  appointments     Appointment[]
  providerServices ProviderService[]

  @@map("services")
}

model ProviderService {
  id         String @id @default(cuid())
  providerId String
  serviceId  String
  price      Int?   // custom price override

  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([providerId, serviceId])
  @@map("provider_services")
}

model Availability {
  id         String    @id @default(cuid())
  providerId String
  dayOfWeek  Int       // 0-6 (Sunday-Saturday)
  startTime  String    // HH:MM format
  endTime    String    // HH:MM format
  date       DateTime? // for specific date overrides
  active     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("availability")
}

model Appointment {
  id        String            @id @default(cuid())
  patientId String
  providerId String
  serviceId String
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(PENDING)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  patient  User     @relation(fields: [patientId], references: [id])
  provider Provider @relation(fields: [providerId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])
  payments Payment[]

  @@map("appointments")
}

model Payment {
  id              String        @id @default(cuid())
  appointmentId   String
  userId          String
  stripeSessionId String?       @unique
  amount          Int           // amount in cents
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Message {
  id          String      @id @default(cuid())
  fromUserId  String
  toUserId    String
  subject     String
  content     String
  isRead      Boolean     @default(false)
  messageType MessageType @default(GENERAL)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  fromUser User @relation("MessageFrom", fields: [fromUserId], references: [id])
  toUser   User @relation("MessageTo", fields: [toUserId], references: [id])

  @@map("messages")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

enum Role {
  PATIENT
  STAFF
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ServiceCategory {
  CONSULTATION
  EVALUATION
  TREATMENT
  RECOVERY
  REHABILITATION
  MEDICAL
  GENERAL
}

enum PaymentMethod {
  CASH
  CARD
  INSURANCE
  BANK_TRANSFER
}

enum MessageType {
  GENERAL
  SYSTEM
  APPOINTMENT
  TREATMENT
  BILLING
  CONTACT_FORM
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}
